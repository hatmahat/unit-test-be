// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: payment_by.sql

package db

import (
	"context"
)

const createPaymentName = `-- name: CreatePaymentName :one
INSERT INTO payment_by (
    payment_name 
) VALUES ($1) RETURNING id, payment_name
`

func (q *Queries) CreatePaymentName(ctx context.Context, paymentName string) (PaymentBy, error) {
	row := q.db.QueryRowContext(ctx, createPaymentName, paymentName)
	var i PaymentBy
	err := row.Scan(&i.ID, &i.PaymentName)
	return i, err
}

const deletePaymenBy = `-- name: DeletePaymenBy :exec
DELETE FROM payment_by WHERE id = $1
`

func (q *Queries) DeletePaymenBy(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePaymenBy, id)
	return err
}

const getPaymentBy = `-- name: GetPaymentBy :many
SELECT id, payment_name FROM payment_by LIMIT $1 OFFSET $2
`

type GetPaymentByParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPaymentBy(ctx context.Context, arg GetPaymentByParams) ([]PaymentBy, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentBy, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentBy{}
	for rows.Next() {
		var i PaymentBy
		if err := rows.Scan(&i.ID, &i.PaymentName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentById = `-- name: GetPaymentById :one
SELECT id, payment_name FROM payment_by WHERE id = $1
`

func (q *Queries) GetPaymentById(ctx context.Context, id int64) (PaymentBy, error) {
	row := q.db.QueryRowContext(ctx, getPaymentById, id)
	var i PaymentBy
	err := row.Scan(&i.ID, &i.PaymentName)
	return i, err
}

const updatePaymentNameById = `-- name: UpdatePaymentNameById :one
UPDATE payment_by SET payment_name = $1 WHERE id = $2 RETURNING id, payment_name
`

type UpdatePaymentNameByIdParams struct {
	PaymentName string `json:"payment_name"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdatePaymentNameById(ctx context.Context, arg UpdatePaymentNameByIdParams) (PaymentBy, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentNameById, arg.PaymentName, arg.ID)
	var i PaymentBy
	err := row.Scan(&i.ID, &i.PaymentName)
	return i, err
}
